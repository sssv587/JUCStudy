public class CompletableFuture<T> implements Future<T>, CompletionStage<T> {}

CompletionStage接口:
- 代表异步计算过程中的某一个阶段,一个阶段完成以后可能会触发另外一个阶段
- 一个阶段的计算执行可以是一个Function,Consumer或者Runnable
- 一个阶段的执行能使被单个阶段的完成触发,也可能是由多个阶段一起触发

四大静态方法:
runAsync(无返回值)
    - public static CompletableFuture<Void> runAsync(Runnable runnable)
    - public static CompletableFuture<Void> runAsync(Runnable runnable,Executor executor)
supplyAsync(有返回值)
    - public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)
    - public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,Executor executor)
如果没有指定Executor,直接使用ForkJoinPool.commonPool()作为他的线程池执行异步代码

从Java8开始引入了CompletableFuture,他是Future的功能增强版,减少阻塞和轮询,可以传入回调对象,当异步任务完成或者发生异常时,自动调佣回调对象的回调方法
解释下为什么默认线程池关闭,自定义线程池记得关闭

CompletableFuture的优点:
1.异步任务结束时,会自动回调某个对象的方法
2.主线程设置好回调后,不再关心异步任务的执行,异步任务之前可以顺序执行
3.异步任务出错时,会自动调用某个对象的方法

常用方法
1.获得结果和触发计算
    获取结果
        1.public T get(); 不见不散,需要抛异常
        2.public T get(long timeout,TimeUnit unit); 过时不候,需要抛异常
        3.public T join(); 不见不散,不需要抛异常
        4.public T getNow(T valueIfAbsent); 计算完,返回计算完成后的结果;没算完,返回设定的valueIfAbsent值
    主动触发计算
        1.public boolean complete(T value);
2.对计算结果进行处理
3.对计算结果进行消费
4.对计算速度进行选用
5.对计算结果进行合并