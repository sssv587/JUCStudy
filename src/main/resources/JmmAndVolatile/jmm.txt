大厂面试题:
1.你知道什么是Java内存模型JMM(Java Memory Model,简称JMM)吗?
答:Java虚拟机规范中试图定义一种Java内存模型来屏蔽掉各种硬件和操作系统的内存访问差异,
以实现让Java程序在各种平台下都能达到一致的内存访问效果
本身是一种`抽象的概念`并不真实存在它仅仅描述的是一组`约定或规范`,通过这组规范定义了程序中(尤其是多线程)各个变量的读写访问方式并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见,关键技术点都是围绕多线程的`原子性、可见性和有序性`展开的。
   原则：JMM的关键技术点都是围绕多线程的原子性、可见性和有序性展开的
 能干嘛？
    1.通过JMM来实现线程和主内存之间的抽象关系
    2.屏蔽各个硬件平台和操作系统的内存访问差异以实现让Java程序在各种平台下都能达到一致的内存访问效果

2.JMM与volatile它们两个之间的关系?

3.JMM有哪些特性or它的三大特性是什么?
可见性:当一个线程修改了某一个共享变量的值,其他线程是否能够立即知道该变更
原子性:指一个操作是不可中断的，即多线程环境下，操作不能被其他线程干扰
有序性:对于一个线程的执行代码而言,我们总是习惯性认为代码的执行总是从上到下,有序执行。
      但为了提供性能,编译器和处理器通常会对指令序列进行重新排序。
      指令重排可以保证串行语义一致,但没有义务保证多线程间的语义也一致，即可能产生"脏读",简单说，
      两行以上不相干的代码在执行的时候有可能先执行的不是第一条,不见得是从上到下顺序执行,执行顺序会被优化。
      处理器在进行重排序时必须要考虑指令之间的数据依赖性

4.为什么要有JMM,它为什么出现?作用和功能是什么?

5.happens-before先行发生原则你有了解过吗?
在JMM中,如果一个操作执行的结果需要对另一个操作可见性或者 代码重排序,那么这两个操作之间必须存在happens-before关系
- 如果一个操作happens-before另一个操作,那么第一个操作的执行结果将对第二个操作可见,而且第一个操作的执行顺序排在第二个操作之前。
- 两个操作之间存在happens-before关系,并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致,那么这种重排序并不非法。
8条规则:
    1、次序规则
        一个线程内,按照代码顺序,写在前面的操作先行发生于写在后面的操作;
        前一个操作的结果可以被后续的操作获取。讲白点就是前面一个操作把变量X赋值为1,那后面一个操作肯定能知道X已经变成了1。
    2、锁定规则
        一个unLock操作先行发生于后面((这里的"后面"是指时间上的先后))对同一个锁的lock操作
    3、volatile变量规则
        对一个volatile变量的写操作先行发生于后面对这个变量的读操作,前面的写对后面的读是可见的,这里的"后面"同样是指时间上的先后。
    4、传递规则
        如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以得出操作A先行发生于操作C
    5、线程启动规则(Thread Start Rule)
        Thread对象的start()方法先行发生于此线程的每一个动作
    6、线程中断规则(Thread Interruption Rule)
        对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生;
        可以通过Thread.interrupted()检测到是否发生中断
    7、线程终止规则(Thread Termination Rule)
        线程中的所有操作都先行发生于对此线程的终止检测,我们可以通过Thread::join()方法是否结束
        Thread::isAlive()的返回值等手段检测线程是否已经终止执行。
    8、对象终结规则(Finalizer Rule)
        一个对象的初始化完成(构造函数执行结束)先行发生于它的finalize()方法的开始
        对象没有完成初始化之前，是不能调用finalized()方法的

6.多线程对共享变量的读写过程
- 我们定义的所有共享变量都储存在物理主内存中
- 每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)
- 线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存，不能直接从主内存中读写(不能越级)
- 不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行(同级不能相互访问)