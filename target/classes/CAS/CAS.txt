1.什么是CAS(CompareAndSwap)
compare and swap的缩写,中文翻译成比较并交换,实现并发算法时常用到的一种技术
它包含三个操作数——内存位置、预期原值及更新值
执行CAS操作的时候,将内存位置的值与预期原值比较:
    1)如果相匹配,那么处理器会自动将该位置值更新为新值
    2)如果不匹配,处理器不做任何操作,多个线程同时执行CAS操作只有一个会成功

2.compareAndSet()方法的源代码
public final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);
public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);
public final native boolean compareAndSwapLong(Object var1, long var2, long var4, long var6);
上面三个方法都是类似的，主要对4个参数做一下说明。
var1:表示要操作的对象
var2:表示要操作对象中属性地址的偏移量
var4:表示需要修改数据的期望的值
var5/var6:表示需要修改为的新值

3.Unsafe类
是CAS的核心类,由于Java方法无法直接访问底层系统,需要通过本地(native)方法来访问,Unsafe相当于一个后门,基于该类可以直接操作特定内存的数据。
Unsafe类存在于sun.misc包中,其内部方法操作可以像C的指针一样直接操作内存,因为Java中CAS操作的执行依赖于Unsafe类的方法

4.Unsafe类底层汇编源码分析
你只需要记住:CAS是靠硬件实现的从而在硬件层面提升效率,最底层还是交给硬件来保证原子性和可见性
实现方式是基于硬件平台的汇编指令,在intel的CPU中(X86机器上),使用的是汇编指令cmpxchg指令。

核心思想就是:比较要更新变量的值V和预期值E(compare),相等才会将V的值设为新值N(swap)如果不相等自旋再来。

5.原子引用AtomicReference

6.CAS的两大缺点
  1)循环时间长开销很大
  2)引出来ABA问题
    CAS算法实现一个重要前提需要取出内存中某时刻的数据并在当下时刻比较并替换,那么在这个时间差类会导致数据的变化。

    比如说一个线程one从内存位置V中取出A,这时候另一个线程two也从内存中取出A,并且线程two进行了一些操作将值变成了B,
    然后线程two又将V位置的数据变成A,这时候线程one进行CAS操作发现内存中仍然是A,然后线程one操作成功

    尽管线程one的CAS操作成功,但是不代表这个过程就是没有问题的