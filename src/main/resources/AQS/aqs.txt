1.AQS是什么
是用来实现锁或者其他同步器组件的公共基础部分的抽象实现,是重量级基础框架及整个JUC体系的基石,主要用于解决锁分配给"谁"的问题
整体就是一个抽象的FIFO队列来完成资源获取线程的排队工作,并通过一个int类变量标识持有锁的状态
CLH:Craig、Landin and Hagersten 队列,是一个单向链表,AQS中的队列是CLH变体的虚拟双向队列FIFO

2.AQS同步队列的基本结构
是CLH变体的虚拟双向队列FIFO

3.AQS的state与CLH队列
AQS的同步状态State成员变量:private volatile int state;
AQS的CLH队列:CLH队列(三个大牛的名字组成),为一个双向队列
有阻塞就需要排队，实现排队必然需要队列

4.AQS自身属性和Node节点介绍
AQS自身属性和Node节点介绍.png

5.AQS源码分析
1)可以明显看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:hasQueuedPredecessors()
  hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法
2)从非公平锁的lock方法往下串
public final void acquire(int arg) {
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}
3)第二个节点进入以后,会走AQS的private Node addWaiter(Node mode)方法
4)然后会进入private final boolean parkAndCheckInterrupt()方法,LockSupport的park()方法