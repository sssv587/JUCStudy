Thread类下的三个方法:
1.public void interrupt()
    实例方法,实例方法interrupt()仅仅是设置线程的中断状态为true,不会停止线程
2.public static boolean interrupted()
    静态方法,Thread.interrupted();
    判断线程是否被中断,并清除当前中断状态
    这个方法做了两件事:
        1.返回当前线程的中断状态
        2.将当前线程的中断状态设为false
3.public boolean isInterrupted()
    实例方法,判断当前线程是否被中断（通过检查中断标志位）

首先
    一个线程不应该由其他线程来强制中断或停止,而是应该由线程自己自行停止。所以,Thread.stop,Thread.suspend,Thread.resume 都已经被废弃了。

其次
    在Java中没有办法立即停止一条线程,然而停止线程却显得尤为重要,如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。

    中断只是一种协作机制,Java没有给中断增加任何语法,中断的过程完全需要程序员自己实现。若要中断一个线程,你需要手动调用该线程的interrupt方法,该方法也仅仅是将线程对象的中断标识设成true;
    接着你需要自己写代码不断地检测当前线程的标识位,如果为true,表示别的线程要求这条线程中断，
此时究竟该做什么需要你自己写代码实现。

	每个线程对象中都有一个标识,用于表示线程是否被中断；该标识位为true表示中断，为false表示未中断；通过调用线程对象的interrupt方法将该线程的标识位设为true；可以在别的线程中调用，也可以在自己的线程中调用

如何中断一个运行中的线程?

如何停止一个运行中的线程?


面试题:
1.如何停止中断运行中的线程?
    1.通过一个volatile变量实现
    2.通过AtomicBoolean
    3.通过Thread类自带的中断api实例方法实现
        在需要中断的线程中不断监听中断状态,一旦发生中断,就执行相应的中断处理业务逻辑stop线程

2.当前线程的中断标识为true,是不是线程就立刻停止?
具体来说，当对一个线程，调用 interrupt()时：
    1. 如果线程处于正常活动状态,那么会将该线程的中断标志设置为 true,仅此而已。
    被设置中断标志的线程将继续正常运行,不受影响。所以,interrupt() 并不能真正的中断线程,需要被调用的线程自己进行配合才行。

    2. 如果线程处于被阻塞状态(例如处于sleep, wait, join 等状态),在别的线程中调用当前线程对象的interrupt方法,
    那么线程将立即退出被阻塞状态,并抛出一个InterruptedException异常。

3.静态方法Thread.interrupted(),谈谈你的理解