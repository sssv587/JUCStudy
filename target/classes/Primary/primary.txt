JUC基础

1.进程和线程
进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——资源分配的最小单位
线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程——程序执行的最小单位

2.wait/sleep 的区别
1)sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用
2)sleep 不会释放锁，它也不需要占用锁。wait 会释放锁，但调用它的前提是当前线程占有锁(即代码要在 synchronized 中)
3)它们都可以被 interrupted 方法中断

3.并发与并行
并发：同一时刻多个线程在访问同一个资源，多个线程对一个点
    例子：春运抢票 电商秒杀...
并行：多项工作一起执行，之后再汇总
    例子：泡方便面，电水壶烧水，一边撕调料倒入桶中

4.Lock与synchronized区别
1)Lock是一个接口,而synchronized是Java中的关键字,synchronized是内置的语言实现
2)synchronized在发生异常时,会自动释放线程占有的锁,因此不会导致死锁现象发生;而Lock在发生异常时,如果没有主动通过unlock()去释放锁,则很可能造成死锁现象,因此使用Lock时需在finally块中释放锁
3)Lock可以让等待锁的线程响应中断,而synchronized却不行,使用synchronized时,等待的线程会一直等待下去,不能够响应中断
4)通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到
5)Lock 可以提高多个线程进行读操作的效率

5.线程间通信
wait、notify、notifyAll
线程间定制化通信:lock.ThreadDemo3.java

6.集合的线程安全(ArrayList)
1)使用Vector集合
2)使用Collections解决:List<String> list = Collections.synchronizedList(new ArrayList<>());
3)使用CopyOnWriteArrayList解决,写时复制技术

HashSet(CopyOnWriteArraySet解决)与HashMap(ConcurrentHashMap解决)线程不安全

7.死锁
两个或者两个以上的进程在执行过程中,因为争夺资源而造成一种互相等待的现象,如果没有外力干涉,他们无法再执行下去
产生死锁的原因:
    1)系统资源不足
    2)进程运行推进顺序不合适
    3)资源分配不当
验证是否是死锁,两个命令:
    1)jps
    2)jstack(jvm自带的堆栈跟踪工具) + 进程ID

8.创建线程的多种方式
1)Thread类
2)实现Runnable接口
3)实现Callable接口
4)线程池

Runnable接口和Callable接口
1)是否有返回值,Callable接口有返回值
2)是否抛出异常,Callable接口会抛出异常
3)实现方法名称不同,一个run方法,一个是call方法

9.三大辅助类
1)CountDownLatch:CountDownLatch 类可以设置一个计数器，然后通过 countDown 方法来进行
                 减 1 的操作，使用 await 方法等待计数器不大于 0，然后继续执行 await 方法
                 之后的语句。
  • CountDownLatch 主要有两个方法，当一个或多个线程调用 await 方法时，这些线程会阻塞
  • 其它线程调用 countDown 方法会将计数器减 1(调用 countDown 方法的线程不会阻塞)
  • 当计数器的值变为 0 时，因 await 方法阻塞的线程会被唤醒，继续执行
2)CyclicBarrier:CyclicBarrier 看英文单词可以看出大概就是循环阻塞的意思，在使用中
                CyclicBarrier 的构造方法第一个参数是目标障碍数，每次执行 CyclicBarrier 一
                次障碍数会加一，如果达到了目标障碍数，才会执行 cyclicBarrier.await()之后
                的语句。可以将 CyclicBarrier 理解为加 1 操作
3)Semaphore:
Semaphore 的构造方法中传入的第一个参数是最大信号量(可以看成最大线程池),每个信号量初始化为一个最多只能分发一个许可证。
使用 acquire 方法获得许可证,release 方法释放许可

10.线程池
线程池（英语：thread pool）：一种线程使用模式。线程过多会带来调度开销，
进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。
这避免了在处理短时间任务时创建与销毁线程的代价。线程池不仅能够保证内核的充分利用，还能防止过分调度