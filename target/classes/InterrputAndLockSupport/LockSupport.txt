LockSupport是用来创建锁和其他同步类的基本线程阻塞原语

LockSupport中的park()和unpark()的作用分别是阻塞线程和解除阻塞线程

线程等待唤醒机制:
3种让线程等待和唤醒的方法
 1.使用Object中的wait()方法让线程等待，使用Object中的notify()方法唤醒线程
 2.使用juc包中Condition的await()方法让线程等待，使用signal()方法唤醒线程
 3.LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程

上述两个对象Object和Condition使用的限制条件
线程先要获得并持有锁,必须在锁块(synchronized或lock)中,必须要先等待后唤醒,线程才能够被唤醒


LockSupport是用来创建锁和其他同步类的基本线程阻塞原语
LockSupport是一个线程阻塞工具类,所有的方法都是静态方法,可以让线程在任意位置阻塞,阻塞之后也有对应的唤醒方法。
归根结底,LockSupport调用的是Unsafe中的native代码

LockSupport提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程
LockSupport和每个使用它的线程都有一个许可(permit)关联
每个线程都有一个相关permit,permit最多只有一个,重复调用unpark也不会积累凭证

形象的理解
线程阻塞需要消耗凭证(permit),这个凭证最多只有1个
当调用park方法时
 - 如果有凭证,则会直接消耗掉这个凭证然后正常退出
 - 如果无凭证,就必须阻塞等待凭证可用
而unpark则相反,它会增加一个凭证,但凭证最多只能有1个,累加无效

1.为什么可以突破wait/notify的原有调用顺序
因为unpark获得了一个凭证,之后再调用park方法,就可以名正言顺的凭证消费,故不会阻塞,先发放了凭证后续可以畅通无阻

2.为什么唤醒两次后阻塞两次,但最终结果还会阻塞线程
因为凭证的数量最多为1,连续调用两次unpark和调用依次unpark效果一样,只会增加一个凭证;而调用两次park却需要消费两个凭证,证不够,不能放行