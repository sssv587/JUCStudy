1.什么是ThreadLocal
ThreadLocal提供线程局部变量。
这些变量与正常的变量不同,因为每一个线程在访问ThreadLocal实例的时候(通过其get或set方法)都有自己的、独立初始化的变量副本。
ThreadLocal实例通常是类中的私有静态字段,使用它的目的是希望将状态(例如，用户ID或事务ID)与线程关联起来

2.Thread、ThreadLocal、ThreadLocalMap关系.png
ThreadLocalMap从字面上就可以看出这是一个保存ThreadLocal对象的map(其实是以ThreadLocal为Key),
不过是经过了两层包装的ThreadLocal对象

3.什么是内存泄漏?
不再会被使用的对象或者变量占用的内存不能被回收,就是内存泄漏

强引用:当内存不足，JVM开始垃圾回收,对于强引用的对象,就算是出现了OOM也不会对该对象进行回收,死都不收
软引用:对于只有软引用的对象来说,当系统内存充足时它 不会被回收,当系统内存不足时它会被回收
弱引用:对于只有弱引用的对象来说,只要垃圾回收机制一运行,不管JVM的内存空间是否足够,都会回收该对象占用的内存